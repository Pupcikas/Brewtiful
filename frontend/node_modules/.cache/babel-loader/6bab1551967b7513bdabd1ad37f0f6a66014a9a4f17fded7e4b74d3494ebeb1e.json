{"ast":null,"code":"// src/axiosInstance.js\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\n\n// Create an Axios instance\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  withCredentials: true // Include cookies (for refresh tokens)\n});\n\n// Utility function to get the access token from localStorage\nconst getAccessToken = () => {\n  return localStorage.getItem(\"token\");\n};\n\n// Utility function to set the access token in localStorage\nconst setAccessToken = token => {\n  localStorage.setItem(\"token\", token);\n};\n\n// Utility function to remove the access token\nconst removeAccessToken = () => {\n  localStorage.removeItem(\"token\");\n};\n\n// Function to check if the token is expired\nconst isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  } catch (error) {\n    console.error(\"Failed to decode token:\", error);\n    return true;\n  }\n};\n\n// Function to refresh the access token using the refresh token\nconst refreshAccessToken = async () => {\n  try {\n    const {\n      data\n    } = await axios.post(\"http://localhost:5000/api/auth/refresh-token\", {}, {\n      withCredentials: true\n    });\n    setAccessToken(data.token);\n    return data.token;\n  } catch (error) {\n    console.error(\"Failed to refresh token:\", error);\n    removeAccessToken();\n    window.location.href = \"/login\"; // Redirect to login\n    return null;\n  }\n};\n\n// Request interceptor to add the Authorization header\napi.interceptors.request.use(async config => {\n  let token = getAccessToken();\n  if (token && isTokenExpired(token)) {\n    // Token is expired, try to refresh it\n    token = await refreshAccessToken();\n  }\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle 401 errors\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const newToken = await refreshAccessToken();\n      if (newToken) {\n        originalRequest.headers[\"Authorization\"] = `Bearer ${newToken}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      console.error(\"Failed to refresh token:\", refreshError);\n      // Optionally, remove token and redirect to login\n      removeAccessToken();\n      window.location.href = \"/login\";\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","withCredentials","getAccessToken","localStorage","getItem","setAccessToken","token","setItem","removeAccessToken","removeItem","isTokenExpired","decoded","currentTime","Date","now","exp","error","console","refreshAccessToken","data","post","window","location","href","interceptors","request","use","config","headers","Promise","reject","response","originalRequest","status","_retry","newToken","refreshError"],"sources":["C:/Users/Domas/Desktop/5 semestras/Brewtiful/frontend/src/axiosInstance.js"],"sourcesContent":["// src/axiosInstance.js\r\nimport axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n// Create an Axios instance\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  withCredentials: true, // Include cookies (for refresh tokens)\r\n});\r\n\r\n// Utility function to get the access token from localStorage\r\nconst getAccessToken = () => {\r\n  return localStorage.getItem(\"token\");\r\n};\r\n\r\n// Utility function to set the access token in localStorage\r\nconst setAccessToken = (token) => {\r\n  localStorage.setItem(\"token\", token);\r\n};\r\n\r\n// Utility function to remove the access token\r\nconst removeAccessToken = () => {\r\n  localStorage.removeItem(\"token\");\r\n};\r\n\r\n// Function to check if the token is expired\r\nconst isTokenExpired = (token) => {\r\n  if (!token) return true;\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000;\r\n    return decoded.exp < currentTime;\r\n  } catch (error) {\r\n    console.error(\"Failed to decode token:\", error);\r\n    return true;\r\n  }\r\n};\r\n\r\n// Function to refresh the access token using the refresh token\r\nconst refreshAccessToken = async () => {\r\n  try {\r\n    const { data } = await axios.post(\r\n      \"http://localhost:5000/api/auth/refresh-token\",\r\n      {},\r\n      { withCredentials: true }\r\n    );\r\n    setAccessToken(data.token);\r\n    return data.token;\r\n  } catch (error) {\r\n    console.error(\"Failed to refresh token:\", error);\r\n    removeAccessToken();\r\n    window.location.href = \"/login\"; // Redirect to login\r\n    return null;\r\n  }\r\n};\r\n\r\n// Request interceptor to add the Authorization header\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    let token = getAccessToken();\r\n\r\n    if (token && isTokenExpired(token)) {\r\n      // Token is expired, try to refresh it\r\n      token = await refreshAccessToken();\r\n    }\r\n\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle 401 errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        const newToken = await refreshAccessToken();\r\n        if (newToken) {\r\n          originalRequest.headers[\"Authorization\"] = `Bearer ${newToken}`;\r\n          return api(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        console.error(\"Failed to refresh token:\", refreshError);\r\n        // Optionally, remove token and redirect to login\r\n        removeAccessToken();\r\n        window.location.href = \"/login\";\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIC,KAAK,IAAK;EAChCH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;AACtC,CAAC;;AAED;AACA,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EAC9BL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIJ,KAAK,IAAK;EAChC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EACvB,IAAI;IACF,MAAMK,OAAO,GAAGd,SAAS,CAACS,KAAK,CAAC;IAChC,MAAMM,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,OAAOH,OAAO,CAACI,GAAG,GAAGH,WAAW;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAC/B,8CAA8C,EAC9C,CAAC,CAAC,EACF;MAAEnB,eAAe,EAAE;IAAK,CAC1B,CAAC;IACDI,cAAc,CAACc,IAAI,CAACb,KAAK,CAAC;IAC1B,OAAOa,IAAI,CAACb,KAAK;EACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChDR,iBAAiB,CAAC,CAAC;IACnBa,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;IACjC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACAzB,GAAG,CAAC0B,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAOC,MAAM,IAAK;EAChB,IAAIrB,KAAK,GAAGJ,cAAc,CAAC,CAAC;EAE5B,IAAII,KAAK,IAAII,cAAc,CAACJ,KAAK,CAAC,EAAE;IAClC;IACAA,KAAK,GAAG,MAAMY,kBAAkB,CAAC,CAAC;EACpC;EAEA,IAAIZ,KAAK,EAAE;IACTqB,MAAM,CAACC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUtB,KAAK,EAAE;EACrD;EAEA,OAAOqB,MAAM;AACf,CAAC,EACAX,KAAK,IAAK;EACT,OAAOa,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAlB,GAAG,CAAC0B,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAKA,QAAQ,EACtB,MAAOf,KAAK,IAAK;EACf,MAAMgB,eAAe,GAAGhB,KAAK,CAACW,MAAM;EAEpC,IACEX,KAAK,CAACe,QAAQ,IACdf,KAAK,CAACe,QAAQ,CAACE,MAAM,KAAK,GAAG,IAC7B,CAACD,eAAe,CAACE,MAAM,EACvB;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMjB,kBAAkB,CAAC,CAAC;MAC3C,IAAIiB,QAAQ,EAAE;QACZH,eAAe,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUO,QAAQ,EAAE;QAC/D,OAAOrC,GAAG,CAACkC,eAAe,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOI,YAAY,EAAE;MACrBnB,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEoB,YAAY,CAAC;MACvD;MACA5B,iBAAiB,CAAC,CAAC;MACnBa,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOM,OAAO,CAACC,MAAM,CAACM,YAAY,CAAC;IACrC;EACF;EAEA,OAAOP,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
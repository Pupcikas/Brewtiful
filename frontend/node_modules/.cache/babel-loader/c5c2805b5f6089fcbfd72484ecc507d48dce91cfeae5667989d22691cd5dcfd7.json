{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nasync function refreshToken() {\n  try {\n    const response = await fetch(\"api/auth/refresh-token\", {\n      method: \"POST\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to refresh token.\");\n    }\n    const data = await response.json();\n    localStorage.setItem(\"token\", data.token);\n    console.log(\"Token refreshed successfully.\");\n  } catch (error) {\n    console.error(\"Error refreshing token:\", error);\n  }\n}\nfunction monitorToken() {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    try {\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        console.log(\"Token has expired.\");\n      } else {\n        console.log(\"Token is still valid. Expires at:\", new Date(decoded.exp * 1000));\n      }\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n    }\n  } else {\n    console.log(\"No token found in localStorage.\");\n  }\n}\nexport default monitorToken;","map":{"version":3,"names":["jwtDecode","refreshToken","response","fetch","method","ok","Error","data","json","localStorage","setItem","token","console","log","error","monitorToken","getItem","decoded","currentTime","Date","now","exp"],"sources":["C:/Users/Domas/Desktop/5 semestras/Brewtiful/frontend/src/pages/monitorToken.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\r\n\r\nasync function refreshToken() {\r\n  try {\r\n    const response = await fetch(\"api/auth/refresh-token\", { method: \"POST\" });\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to refresh token.\");\r\n    }\r\n    const data = await response.json();\r\n    localStorage.setItem(\"token\", data.token);\r\n    console.log(\"Token refreshed successfully.\");\r\n  } catch (error) {\r\n    console.error(\"Error refreshing token:\", error);\r\n  }\r\n}\r\nfunction monitorToken() {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    try {\r\n      const decoded = jwtDecode(token);\r\n      const currentTime = Date.now() / 1000;\r\n      if (decoded.exp < currentTime) {\r\n        console.log(\"Token has expired.\");\r\n      } else {\r\n        console.log(\r\n          \"Token is still valid. Expires at:\",\r\n          new Date(decoded.exp * 1000)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to decode token:\", error);\r\n    }\r\n  } else {\r\n    console.log(\"No token found in localStorage.\");\r\n  }\r\n}\r\n\r\nexport default monitorToken;\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAEtC,eAAeC,YAAYA,CAAA,EAAG;EAC5B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;MAAEC,MAAM,EAAE;IAAO,CAAC,CAAC;IAC1E,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;IACzCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB,MAAMJ,KAAK,GAAGF,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIL,KAAK,EAAE;IACT,IAAI;MACF,MAAMM,OAAO,GAAGjB,SAAS,CAACW,KAAK,CAAC;MAChC,MAAMO,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MACrC,IAAIH,OAAO,CAACI,GAAG,GAAGH,WAAW,EAAE;QAC7BN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACnC,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CACT,mCAAmC,EACnC,IAAIM,IAAI,CAACF,OAAO,CAACI,GAAG,GAAG,IAAI,CAC7B,CAAC;MACH;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC,MAAM;IACLF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD;AACF;AAEA,eAAeE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/axiosInstance.js\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  withCredentials: true // Include cookies in requests if needed\n});\n\n// Request interceptor to add the Authorization header to each request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\"); // Retrieve the token from localStorage\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`; // Set the Authorization header\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh on 401 responses\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Check if the error response is 401 (Unauthorized) and if the request hasn't been retried yet\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Mark the request as retried\n\n    try {\n      // Attempt to refresh the token\n      const {\n        data\n      } = await axios.post(\"http://localhost:5000/api/auth/refresh-token\", {}, {\n        withCredentials: true\n      });\n\n      // Store the new token in localStorage\n      localStorage.setItem(\"token\", data.token);\n\n      // Update the Authorization header with the new token\n      originalRequest.headers[\"Authorization\"] = `Bearer ${data.token}`;\n\n      // Retry the original request with the new token\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"Failed to refresh token:\", refreshError);\n      // Optionally, handle token refresh failure (e.g., redirect to login)\n      // localStorage.removeItem(\"token\");\n      // window.location.href = \"/login\";\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","data","post","setItem","refreshError","console"],"sources":["C:/Users/Domas/Desktop/5 semestras/Brewtiful/frontend/src/axiosInstance.js"],"sourcesContent":["// src/axiosInstance.js\r\nimport axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  withCredentials: true, // Include cookies in requests if needed\r\n});\r\n\r\n// Request interceptor to add the Authorization header to each request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\"); // Retrieve the token from localStorage\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`; // Set the Authorization header\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle token refresh on 401 responses\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // Check if the error response is 401 (Unauthorized) and if the request hasn't been retried yet\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true; // Mark the request as retried\r\n\r\n      try {\r\n        // Attempt to refresh the token\r\n        const { data } = await axios.post(\r\n          \"http://localhost:5000/api/auth/refresh-token\",\r\n          {},\r\n          { withCredentials: true }\r\n        );\r\n\r\n        // Store the new token in localStorage\r\n        localStorage.setItem(\"token\", data.token);\r\n\r\n        // Update the Authorization header with the new token\r\n        originalRequest.headers[\"Authorization\"] = `Bearer ${data.token}`;\r\n\r\n        // Retry the original request with the new token\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\"Failed to refresh token:\", refreshError);\r\n        // Optionally, handle token refresh failure (e.g., redirect to login)\r\n        // localStorage.removeItem(\"token\");\r\n        // window.location.href = \"/login\";\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE,CAAC,CAAC;EACvD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;;EAEpC;EACA,IACEK,KAAK,CAACG,QAAQ,IACdH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAC7B,CAACD,eAAe,CAACE,MAAM,EACvB;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI,CAAC,CAAC;;IAE/B,IAAI;MACF;MACA,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAC/B,8CAA8C,EAC9C,CAAC,CAAC,EACF;QAAEjB,eAAe,EAAE;MAAK,CAC1B,CAAC;;MAED;MACAM,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACX,KAAK,CAAC;;MAEzC;MACAQ,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUQ,IAAI,CAACX,KAAK,EAAE;;MAEjE;MACA,OAAOR,GAAG,CAACgB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOM,YAAY,EAAE;MACrBC,OAAO,CAACX,KAAK,CAAC,0BAA0B,EAAEU,YAAY,CAAC;MACvD;MACA;MACA;MACA,OAAOT,OAAO,CAACC,MAAM,CAACQ,YAAY,CAAC;IACrC;EACF;EAEA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}